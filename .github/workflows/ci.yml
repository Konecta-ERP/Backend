name: CI Pipeline - ERP Backend

on:
  push:
    branches: ["develop", "main"]
  pull_request:
    branches: ["develop", "main"]

jobs:
  build-test-secure:
    name: Build, Test & Secure Backend
    runs-on: ubuntu-latest

    steps:
      # === Checkout the code ===
      - name: Checkout code
        uses: actions/checkout@v4

      # === Set up Java environment ===
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'maven'

      # === Cache Maven dependencies ===
      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      # === Validate Maven ===
      - name: Validate Maven Wrapper
        run: mvn -v

      # === Install Dependencies ===
      - name: Install Dependencies
        run: mvn dependency:resolve

      # === Code Formatting & Linting ===
      - name: Validate Code Formatting & Linting
        run: mvn spotless:check

      # === Run Unit Tests ===
      - name: Run Unit Tests
        run: mvn clean verify -DskipTests=false

      # === OWASP Dependency Vulnerability Scan ===
      - name: Run OWASP Dependency Check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          project: "ERP-Backend"
          path: "."
          format: "HTML"
          outputDirectory: "./dependency-check-report"
        continue-on-error: true

      # === Trivy Security Scan (Code + Dockerfile) ===
      - name: Run Trivy Scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          ignore-unfixed: true
          format: 'table'
          output: './trivy-report/trivy.txt'
          severity: 'CRITICAL,HIGH'
        continue-on-error: true

      # === Authenticate to Google Cloud ===
      - name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # === Configure Docker for GCR ===
      - name: Configure Docker for GCR
        run: gcloud auth configure-docker gcr.io

      # === Build Docker Image ===
      - name: Build Docker Image
        run: |
          docker build -t gcr.io/${{ secrets.GCP_PROJECT_ID }}/erp-backend:${{ github.sha }} .

      # === Push Docker Image to GCR ===
      - name: Push Docker Image
        run: |
          docker push gcr.io/${{ secrets.GCP_PROJECT_ID }}/erp-backend:${{ github.sha }}

      # === Upload Reports (Security & Build) ===
      - name: Upload Dependency Check Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: dependency-check-report
          path: ./dependency-check-report
          retention-days: 7
          if-no-files-found: ignore

      - name: Upload Trivy Scan Report
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: trivy-scan-report
          path: ./trivy-report
          retention-days: 7
          if-no-files-found: ignore

      # === Save Docker Image Info ===
      - name: Save Docker Image Info
        run: |
          echo "IMAGE=gcr.io/${{ secrets.GCP_PROJECT_ID }}/erp-backend:${{ github.sha }}" >> $GITHUB_ENV
          echo "Docker image pushed to GCR: gcr.io/${{ secrets.GCP_PROJECT_ID }}/erp-backend:${{ github.sha }}"

      # === GitHub Notification on Failure ===
      - name: Notify on Failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number || context.payload.pull_request?.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `ðŸš¨ CI Pipeline failed for commit: **${context.sha}**. Please check the logs and reports.`
            })
